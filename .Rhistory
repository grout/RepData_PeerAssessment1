c(1,-1)
d <- c(1,-1)
var(d)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
mean(temp)
mean(temp$X)
mean(temp)
temp
mean(temp$Prob)
c(0.1,0.4,0.9,1.6)
mean(c)
?mean
mean(temp)
mean(temp[,])
1*0.1+2*0.2+3*0.3+4*0.4
install.packages(c("knitr", "swirl"))
install.packages("swirl")
install.packages("knitlab")
install.packages("kernlab")
swirl
library(swirl)
swirl()
swirl()
swirl()
q()
quiz1 <- function (mu) {
x<-c(0.18, -1.54, 0.42, 0.95)
w<-c(2, 1, 3, 1)
sum = 0
for (i in 1:length(x)) {
sum = sum + w[i] * (x[i]-mu)^2
}
return(sum)
}
curve(quiz1, from=0.0001, to=0.3, xname="mu", ylab="sum of square", main="sum of square")
optimize(quiz1, interval=c(0.001, 0.3))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
data(mtcars)
lm(mpg~weight)
lm(mtcars$mpg~mtcars$weight)
mtcars$mpg
mtcars$weight
mtcars
mtcars$wt
lm(mtcars$mpg~mtcars$wt)
lm(mtcars$wt~mtcars$mpg)
lm(mtcars$mpg~mtcars$wt)
1/2*0.5
0.4/1.5
1.5/0.4
0.4*1.5
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
?norm
?normalize
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean(x)
std(x)
sd(x)
8.58-9.31
8.58-9.31/sd(x)
8.58/sd(x)-mean(x)
sd(x) * 8.58 - mean(x)
sd(x) * 8.58 - mean(x)
8.58 - mean(x)
8.58 - mean(x) * sd(x)
(8.58 - mean(x)) * sd(x)
(8.58 - mean(x)) * sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lme(x~y)
lm(x~y)
lm(y~x)
lm(x~x)
lm(x~Â»)
lm(x~y)
lm(y~x)
lm(y~x)
mean(x)
y<-replicate(1000, mean(runif(100, 5, 25)))
length(y[y > 14 & y < 16])
length(y[y < 14])
length(y[y > 16])
y<-replicate(1000, mean(rnorm(100, 15, 10)))
length(y[y > 14 & y < 16])
length(y[y > 14 & y < 16])
length(y[y > 14 & y < 16])
y<-replicate(1000, mean(rnorm(100, 15, 10)))
length(y[y > 14 & y < 16])
length(y[y > 14 & y < 16])
y<-replicate(1000, mean(rnorm(100, 15, 10)))
length(y[y > 14 & y < 16])
length(y[y > 14 & y < 16])
(1/12)^2
runif(100, 0.5-1/24, 0.5+1/24)
mean(runif(100, 0.5-1/24, 0.5+1/24))
1/24
(1/12)^2
1/144
mean(runif(100, 0.5-1/144, 0.5+1/144))
sqrt(1/12)
30*75/52
```{r results='asis'}
setwd("/media/removable/kingston/data/Development/Courses/Data Science Track/5-Reproducible Research/Assignment 1/RepData_PeerAssessment1")
if (!file.exists("activity.csv")) {
unzip("activity.zip")
}
dataset <- read.csv("activity.csv")
head(dataset)
dailysteps <- dataset[!is.na(dataset$steps),]
dailysteps <- aggregate(dailysteps$steps, list(dailysteps$date), "sum")
names(dailysteps)[1] <- "date"
names(dailysteps)[2] <- "total"
hist(dailysteps$total, breaks=10, xlab="Number of Steps",
main="Histogram of steps taken per day")
summary(dailysteps$total)
averageininterval <- dataset[!is.na(dataset$steps),]
averageininterval <- aggregate(averageininterval$steps,
list(averageininterval$interval), "mean")
names(averageininterval)[1] <- "interval"
names(averageininterval)[2] <- "average"
plot.ts(averageininterval$interval, averageininterval$average,
xlab="Interval", ylab="Average",
main="Average number of steps taken in an interval over all days")
sortedaverageininterval <- averageininterval[order(averageininterval$average,
decreasing=TRUE),]
sortedaverageininterval[1,]
navalues <- dataset[is.na(dataset$steps),]
nrow(navalues)
length(unique(navalues$date))
unique(summary(dataset$date))
missingdates <- unique(navalues$date)
cdataset <- dataset[!is.na(dataset$steps),]
missingdates <- rep(missingdates, each=288)
missingvalues <- rep(averageininterval$interval, 8)
missingvalues <- cbind(averageininterval, missingdates)
names(missingvalues)[2] = "steps"
names(missingvalues)[3] = "date"
cdataset <- rbind(cdataset, missingvalues)
dailysteps <- aggregate(cdataset$steps, list(cdataset$date), "sum")
names(dailysteps)[1] <- "date"
names(dailysteps)[2] <- "total"
hist(dailysteps$total, breaks=10, xlab="Number of Steps",
main="Histogram of steps taken per day")
summary(dailysteps$total)
isweekend <- function(x) {
weekday <- as.POSIXlt(x)$wday
if (weekday == 0 | weekday == 6) {
"weekend"
} else {
"weekday"
}
}
cdataset$weekpos <- rep("weekday", nrow(cdataset))
cdataset$weekpos
iswe <- lapply(cdataset$date, FUN="isweekend")
iswe
lapply(cdataset$date, FUN="isweekend")
?lapply
sapply(cdataset$date, FUN="isweekend")
cdataset$weekpos <- sapply(cdataset$date, FUN="isweekend")
library(ggplot2)
qplot(averageininterval$interval, averageininterval$average, averageininterval,
geom="line",
main="Average steps taken in a time interval",
xlab="Interval",
ylab="Average")
head(cdataset)
averages = aggregate(steps ~ interval + weekpos, data=cdataset, FUN="mean")
head(averages)
nrow(averages)
library(ggplot2)
qplot(interval, steps, Group=weekpos
data=averages,
geom="line",
main="Average steps taken in a time interval",
xlab="Interval",
ylab="Average")
qplot(interval, steps, group=weekpos
data=averages,
geom="line",
main="Average steps taken in a time interval",
xlab="Interval",
ylab="Average")
qplot(interval, steps, group=weekpos
qplot(interval, steps, group=weekpos,
qplot(interval, steps, group=weekpos,
data=averages,
geom="line",
main="Average steps taken in a time interval",
xlab="Interval",
ylab="Average")
qplot(interval, steps, group=weekpos, facets=weekpos
data=averages,
geom="line",
qplot(interval, steps, group=weekpos, facets=weekpos,
data=averages,
geom="line",
main="Average steps taken in a time interval",
xlab="Interval",
ylab="Average")
qplot(interval, steps, group=weekpos, facets=averages$weekpos,
data=averages,
geom="line",
main="Average steps taken in a time interval",
xlab="Interval",
ylab="Average")
qplot(interval, steps, facets=averages$weekpos,
data=averages,
geom="line",
main="Average steps taken in a time interval",
xlab="Interval",
ylab="Average")
qplot(interval, steps, facets=steps ~ weekpos,
data=averages,
geom="line",
main="Average steps taken in a time interval",
xlab="Interval",
ylab="Average")
setwd("/media/removable/kingston/data/Development/Courses/Data Science Track/5-Reproducible Research/Assignment 1/RepData_PeerAssessment1")
if (!file.exists("activity.csv")) {
unzip("activity.zip")
}
dataset <- read.csv("activity.csv")
head(dataset)
dailysteps <- dataset[!is.na(dataset$steps),]
dailysteps <- aggregate(dailysteps$steps, list(dailysteps$date), "sum")
names(dailysteps)[1] <- "date"
names(dailysteps)[2] <- "total"
hist(dailysteps$total, breaks=10, xlab="Number of Steps",
main="Histogram of steps taken per day")
summary(dailysteps$total)
averageininterval <- dataset[!is.na(dataset$steps),]
averageininterval <- aggregate(averageininterval$steps,
list(averageininterval$interval), "mean")
names(averageininterval)[1] <- "interval"
names(averageininterval)[2] <- "average"
plot.ts(averageininterval$interval, averageininterval$average,
xlab="Interval", ylab="Average",
main="Average number of steps taken in an interval over all days")
sortedaverageininterval <- averageininterval[order(averageininterval$average,
decreasing=TRUE),]
sortedaverageininterval[1,]
navalues <- dataset[is.na(dataset$steps),]
nrow(navalues)
length(unique(navalues$date))
unique(summary(dataset$date))
missingdates <- unique(navalues$date)
cdataset <- dataset[!is.na(dataset$steps),]
missingdates <- rep(missingdates, each=288)
missingvalues <- rep(averageininterval$interval, 8)
missingvalues <- cbind(averageininterval, missingdates)
names(missingvalues)[2] = "steps"
names(missingvalues)[3] = "date"
cdataset <- rbind(cdataset, missingvalues)
dailysteps <- aggregate(cdataset$steps, list(cdataset$date), "sum")
names(dailysteps)[1] <- "date"
names(dailysteps)[2] <- "total"
hist(dailysteps$total, breaks=10, xlab="Number of Steps",
main="Histogram of steps taken per day")
summary(dailysteps$total)
isweekend <- function(x) {
weekday <- as.POSIXlt(x)$wday
if (weekday == 0 | weekday == 6) {
"weekend"
} else {
"weekday"
}
}
cdataset$weekpos <- sapply(cdataset$date, FUN="isweekend")
averages = aggregate(steps ~ interval + weekpos, data=cdataset, FUN="mean")
library(ggplot2)
qplot(interval, steps, group=weekpos,
data=averages,
geom="line",
main="Average steps taken in a time interval",
xlab="Interval",
ylab="Average")
q <- ggplot(averages)
q + facet_grid(steps ~ interval + weekpos)
q + facet_grid(steps ~ interval + weekpos)
q + geom_line(steps, interval)
q + geom_line(step, interval)
q + facet_grid(averages$steps ~ averages$interval + averages$weekpos)
?ggplot
ggplot(averages) +
geom_line(data=averages)
ggplot(averages, aes(x = interval, y = steps)) +
geom_point(aes(colour=weekpos)) +
facet_wrap(~ weekpos, scales = "free")
ggplot(averages, aes(x = interval, y = steps)) +
geom_line(aes(colour=weekpos)) +
facet_wrap(~ weekpos, scales = "free")
ggplot(averages, aes(x = interval, y = steps), ylab="average steps") +
geom_line(aes(colour=weekpos)) +
facet_wrap(~ weekpos, scales = "free")
ggplot(averages, aes(x = interval, y = steps), ylab="average steps") +
geom_line(aes(colour=weekpos), ylab="avg") +
facet_wrap(~ weekpos, scales = "free")
averages = aggregate(steps ~ interval + weekpos, data=cdataset, FUN="mean")
library(ggplot2)
ggplot(averages, aes(x = interval, y = steps)) +
geom_line(aes(colour=weekpos)) +
facet_wrap(~ weekpos, scales = "free")
ggplot(averages, aes(x = interval, y = steps)) +
geom_line(aes(colour=weekpos)) +
facet_grid(~ weekpos, scales = "free")
?facet_grid
ggplot(averages, aes(x = interval, y = steps)) +
geom_line(aes(colour=weekpos)) +
facet_grid(~ weekpos, scales = "fixed")
?facet_grid
ggplot(averages, aes(x = interval, y = steps)) +
geom_line(aes(colour=weekpos)) +
facet_grid(weekpos ~ ., scales = "fixed")
